#problem 1 

#How would you order this array of strings be descending numeric value?

arr = ['10', '11', '9', '7', '8'] 

arr.sort do |a, b| 
  b.to_i <=> a.to_i 
end 

=begin
It's important to remember that in order to compare the values numericaly we have to 
convert them to integers. after that point you just need to switch the order that they 
are sorted in!
=end 

#problem 2 

#Order this array of hashes based on the year of publication of each book, from the 
#earliest to the lastest?

books = [
    {title: 'One Hundred Years of Solitude', author: 'Gabriel Garcia Marquez', published: '1967'},
    {title: 'The Great Gatsby', author: 'F. Scott Fitzgerald', published: '1925'}, 
    {title: 'War and Peace', author: 'Leo Tolstoy', published: '1869'}, 
    {title: 'Ulysses', author: 'James Joyce', published: '1922'}
        ] 

books.sort_by do |book|
  book[:published] 
end 

=begin 
in this problem we don't have to convert the the dates to integers because we know that they
are all strings and ruby can properly and easily sort them as strings from earliest to latest.
=end 

#problem 3

#for each of these collection objects demonstrate how you would reference the letter 'g'

arr1 = ['a', 'b', ['c', ['d', 'e', 'f', 'g']]] 
# arr1[2][1][3] this references the thrid value on the first layer which is an array, second value in the second layer(also array), 
# and then the fourth value in the final array 

arr2 = [{first: ['a', 'b', 'c'], second: ['d', 'e', 'f']}, {third: ['g', 'h', 'i']}]
# arr2[2][:third][0] the third value in the first layer is a hash, you must then reference the first value of the key

arr3 = [['abc'], ['def'], {third: ['ghi']}] 
# arr3[2][:third][0][0] the only thing different in this is that we are referencing the first value in the string after the first
# value of the hash

hsh1 = {'a' => ['d', 'e'], 'b' => ['f', 'g'], 'c' => ['h', 'i']}
# hsh1['b'][1] there aren't that many layers in this one

hsh2 = {first: {'d' => 3}, second: {'e' => 2, 'f' => 1}, third: {'g' => 0}} 
# hsh2[third].key(0) 

#problem 4 

#for the following collections demonstrate how you would change the value 3 to the value 4 

arr1 = [1, [2, 3], 4] 
# arr1[1][1] = 4 all you have to do for these is access

arr2 = [{a: 1}, {b: 2, c: [7, 6, 5], d: 4}, 3] 
# arr2[2] = 4 

hsh1 = {first: [1, 2, [3]]} 
# hsh[:first][2][0] = 4

hsh2 = {['a'] => {a: ['1', :two, 3], b: 4}, 'b' => 5} 
# hsh2['a'][:a][2] = 4 

#problem 5
# given the following nested hash, figure out the total age of the males in the family

munsters = {
  "Herman" => { "age" => 32, "gender" => "male" },
  "Lily" => { "age" => 30, "gender" => "female" },
  "Grandpa" => { "age" => 402, "gender" => "male" },
  "Eddie" => { "age" => 10, "gender" => "male" },
  "Marilyn" => { "age" => 23, "gender" => "female"}
}  

male_age = 0 

munsters.each_value do |info| 
  male_age += info["age"] if info["gender"] == "male" 
end 

male_age 

#problem 6 

#Given this previously seen family hash, print out the name, age and gender of each family member:

munsters = {
  "Herman" => { "age" => 32, "gender" => "male" },
  "Lily" => { "age" => 30, "gender" => "female" },
  "Grandpa" => { "age" => 402, "gender" => "male" },
  "Eddie" => { "age" => 10, "gender" => "male" },
  "Marilyn" => { "age" => 23, "gender" => "female"}
}
#...like this:

# (Name) is a (age)-year-old (male or female).

munsters.each do |name, info|
  puts "#{name} is a #{info["age"]}-year-old #{info["gender"]}." 
end 

#problem 7 

#given the following code, what would be the final values of a and b? Try to work this out without running the code.

a = 2
b = [5, 8] 
arr = [a, b] 

arr[0] += 2
arr[1][0] -= a 
=begin
the value of a stays the same through everything that happens because we never reference
a in a way that would change it. the first change adds 2 to the first index value of the array 
so the array should now be arr = [4, [5, 8]]. next we subtract the value of a from the first value 
of the second index value of the array which should look like arr = [4, [3, 8]]. b changes value
because it is already an array so modifying it in an array form will mutate it's value. 
=end 

#problem 8 

#using the each method, write out some code to output all of the vowels from the strings. 

hsh = {first: ['the', 'quick'], 
       second: ['brown', 'fox'], 
       third: ['jumped'],
        fourth: ['over', 'the', 'lazy', 'dog']
      }

vowels = 'aeiou'      

hsh.each do |_, value| 
  value.each do |string| 
    string.chars.each do |letter| 
      puts letter if vowels.include?(letter) 
    end 
  end 
end 

#problem 9 

# Given the following data structure, return a new array of the same structure but with the sub arrays
# being ordered (alphabetically or numerically as appropriate) in descending order.

arr = [['b', 'c', 'a'], [2, 1, 3], ['blue', 'black', 'green']] 

arr.map do |sub_arrs| 
  sub_arrs.sort do |a, b|
    b <=> a 
  end 
end 

#problem 10 

# Given the following data structure and without modifyinng the original array, use the map method to 
# return a new array identical in structure to the original but where the value of each integer is incremented by 1

arr = [{a: 1}, {b: 2, c: 3}, {d: 4, e: 5, f: 6}].map do |hash|
  new_hash = {}

  hash.each do |key, value|
    new_hash[key] = value + 1
  end
  new_hash 
end 

#problem 11 

# Given the following data structure use a combination of methods, including either the select or reject method, 
# to return a new array identical in structure to the original but containg only the integers that are multiples of 3

arr = [[2], [3, 5, 7], [9], [11, 13, 15]] 

arr.map do |values| 
  values.se;ect do |num| 
    num % 3 == 0 
  end 
end 

#problem 12 

# Given the following data structure, and without using the array#to_h method, write some code that will return a
# hash where the key is the first item in each array and the value is the second item. 

arr = [[:a, 1], ['b', 'two'], ['sea', {c: 3}], [{a: 1, b: 2, c: 3, d: 4}, 'D']] 

hash = {} 

arr.each do |item| 
  hash[item[0]] = item[1] 
end 

hash 

#problem 13 

# Given the following data structure, return a new array containing the same sub-arrays as the original but ordered
# logically by inly taking into consideration the odd numbers they contain. 

arr = [[1, 6, 7], [1, 4, 9], [1, 8, 3]] 

# the sorted array should look like the following 

[[1, 8, 3], [1, 6, 7], [1, 4, 9]] 

arr.sort_by do |sub_array| 
  sub_array.select do |num| 
    num.odd? 
  end 
end 

#problem 14 

# Given this data structure write some code to return an array containg the colors of the fruits and the sizes of the 
# vegetables. The sizes should be uppercase and colors should be capitalized. 

hsh = {
  'grape' => {type: 'fruit', colors: ['red', 'green'], size: 'small'},
  'carrot' => {type: 'vegetable', colors: ['orange'], size: 'medium'},
  'apple' => {type: 'fruit', colors: ['red', 'green'], size: 'medium'},
  'apricot' => {type: 'fruit', colors: ['orange'], size: 'medium'},
  'marrow' => {type: 'vegetable', colors: ['green'], size: 'large'},
} 

# the return value should look like the following 

[["Red", "Green"], "MEDIUM", ["Red", "Green"], ["Orange"], "LARGE"] 

hsh.map do |_, value| 
  if value[:type] == 'fruit' 
    value[:colors].map do |color| 
      color.capitalize 
    end 
     
  elsif value[:type] == 'vegetable' 
    value[:size].upcase 
  end 
end 

#problem 15 

# Given the following data structure write some code to return an array which contains only the hashes 
# where all the integers are even 

arr = [{a: [1, 2, 3]}, {b: [2, 4, 6], c: [3, 6], d: [4]}, {e: [8], f: [6, 10]}] 

arr.select do |hsh| 
  hsh.all? do |_, value| 
    value.all? do |num|
      num.even? 
    end 
  end 
end 

#problem 16 

def generate_uuid 
  characters = [] 
  (0..9).each_with_index do |section, index| 
  ('a'..'f').each { |digit| characters << digit }

  uuid = "" 
  sections = [8, 4, 4, 4, 12] 
  sections.each_with_index do |section, index| 
    section.times { uuid += characters.sample  } 
    uuid += '-' unless index >= sections.size - 1 
  end 

  uuidd 
end 